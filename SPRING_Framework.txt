Annotations:
Annotations are a form of metadata (data about data) added to a Java source file. 
They provide additional information about the program to the compiler, but are not part of the program itself. 
Annotations are used by frameworks and libraries to simplify integration with client code.

Type of Annotations:
	@override: 
		It indicates that a method is intended to override a method in a superclass or implement an interface method. 
		It helps the compiler catch errors when a method does not actually override anything due to issues like incorrect method signatures or method name mismatches.
	@Component:
		Marks a class as a Spring bean. The container automatically detects and registers it as a bean.
	@Autowired: 
		Injects a dependency automatically.
	@Service: 
		Marks a class as a service (specialization of @Component).
	@Repository: 
		Marks a class as a Data Access Object (DAO), used for database interactions.
	@Controller: 
		Marks a class as a Spring MVC controller (for web applications).
	@Configuration: 
		Indicates that the class contains Spring bean definitions (used to define Java-based Spring configuration).
	@Bean: 
		Used within @Configuration classes to define beans programmatically.
	e.t.c

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

SPRING FRAMEWORK:
-----------------
The Spring Framework is a comprehensive, modular framework for building enterprise-level Java applications. It provides infrastructure support, simplifies development, and promotes good programming practices like dependency injection and aspect-oriented programming. Below is a detailed explanation of the major topics and components of the Spring Framework:


1. Core Concepts of Spring
--------------------------
    ● Inversion of Control (IoC):
		○ IoC is a design principle where the control of object creation and lifecycle is transferred to the Spring container.
		○ Instead of creating objects manually, the container manages dependencies and injects them where needed.

    ● Dependency Injection (DI):
        ○ DI is a design pattern and a key feature of Spring.
        ○ Objects are provided with their dependencies (other objects they work with) rather than creating them internally.
        ○ Types of DI: Constructor Injection, Setter Injection, and Field Injection.


2. Spring Container
-------------------
    ● The Spring container is the core of the Spring Framework.
    ● It manages the lifecycle of beans and their dependencies.
    ● Types of Containers:
        ○ BeanFactory (Old): Basic container providing DI support.
        ○ ApplicationContext (New): It is a Interface. Advanced container with additional features like AOP, event propagation, and internationalization.
        	◌ Classes that impliments AplicationContext
        		1. ClasspathXMLApplicationContext:
        		2. AnnotationConfigApplicationContext:
        		3. FileSystemXMLApplicationContext:
        		4. WebApplicationContext:
        

3. Spring Beans
---------------
    ● Beans are objects managed by the Spring container.
    ● Any Object is created, manage by Spring is called 'Beans'

    ● Bean Configuration:
        ○ XML-based configuration.
        ○ Annotation-based configuration (@Component, @Service, @Repository, @Controller).
        ○ Java-based configuration (@Configuration, @Bean).

    ● Bean Scopes: Scop refers to lifecycle of a bean, How long does it live?, How many instances are created?, How is it shared?
        ○ Singleton (default): One instance per container. (if two variable shared same memory location)
        ○ Prototype: New instance every time. (if two variable shared different memory location)
        ○ Request, Session, and Application (for web applications).
        
        
4. Spring Configuration / Bean Configuration
--------------------------------------------
    ● XML Configuration:
        ○ Traditional way of configuring Spring beans and dependencies.
        ○ Example: <bean id="myBean" class="com.example.MyBean"/>

    ● Annotation-Based Configuration:
        ○ Uses annotations like @Component, @Autowired, @Qualifier, etc.
        ○ Reduces the need for XML configuration.

    ● Java-Based Configuration:
        ○ Uses Java classes annotated with @Configuration and @Bean.
        ○ Example:
        		@Configuration
				public class AppConfig {
				    @Bean
				    public MyBean myBean() {
				        return new MyBean();
				    }
				}


5. Spring AOP (Aspect-Oriented Programming)
-------------------------------------------
    ● AOP is used to separate cross-cutting concerns (e.g., logging, security, transaction management) from the business logic.

    ● Key Concepts:
        ○ Aspect: A modularization of a concern (e.g., logging).
        ○ Join Point: A point in the execution of a program (e.g., method execution).
        ○ Advice: Action taken at a join point (e.g., @Before, @After, @Around).
        ○ Pointcut: Expression to define where advice should be applied.

    ● Example:
			@Aspect
			@Component
			public class LoggingAspect {
			    @Before("execution(* com.example.service.*.*(..))")
			    public void logBefore(JoinPoint joinPoint) {
			        System.out.println("Method executed: " + joinPoint.getSignature());
			    }
			}


6. Spring Data Access
---------------------
    ● Simplifies database access and provides consistent exception handling.

    ● JDBC Template:
        ○ Simplifies JDBC operations and reduces boilerplate code.

    ● ORM Integration:
        ○ Supports integration with ORM frameworks like Hibernate, JPA, and MyBatis.

    ● Transaction Management:
        ○ Declarative transaction management using @Transactional.
        ○ Programmatic transaction management using PlatformTransactionManager.


7. Spring MVC (Model-View-Controller)
-------------------------------------
    ● A web framework for building web applications.

    ● Key Components:
        ○ Controller: Handles HTTP requests and returns responses (@Controller, @RestController).
        ○ Model: Represents data to be displayed in the view.
        ○ View: Renders the model (e.g., JSP, Thymeleaf).

    ● Example:
    		@RestController
    		public class MyController {
    		    @GetMapping("/hello")
    		    public String sayHello() {
    		        return "Hello, World!";
    		    }
    		}


8. Spring Boot
--------------
    ● An extension of the Spring Framework that simplifies application development.

    ● Features:
        ○ Auto-configuration.
        ○ Embedded servers (Tomcat, Jetty).
        ○ Production-ready features (metrics, health checks).

    ● Example:
    		@SpringBootApplication
    		public class MyApp {
    		    public static void main(String[] args) {
    		        SpringApplication.run(MyApp.class, args);
    		    }
    		}


9. Spring Security
------------------
    ● Provides authentication, authorization, and protection against common security vulnerabilities.

    ● Key Features:
        ○ Form-based authentication.
        ○ OAuth2 and JWT support.
        ○ CSRF protection.

    ● Example:
    		@EnableWebSecurity
    		public class SecurityConfig extends WebSecurityConfigurerAdapter {
    		    @Override
    		    protected void configure(HttpSecurity http) throws Exception {
    		        http.authorizeRequests()
    		            .antMatchers("/public").permitAll()
    		            .anyRequest().authenticated()
    		            .and()
    		            .formLogin();
    		    }
    		}


10. Spring REST
---------------
    ● Simplifies the development of RESTful web services.

    ● Annotations:
        ○ @RestController, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping.

    ● Example:
    		@RestController
    		@RequestMapping("/api")
    		public class MyRestController {
    		    @GetMapping("/hello")
    		    public String sayHello() {
    		        return "Hello, REST!";
    		    }
    		}


11. Spring Testing
------------------
    ● Provides support for unit and integration testing.

    ● Annotations:
        ○ @SpringBootTest, @MockBean, @WebMvcTest.

    ● Example:
    		@SpringBootTest
    		public class MyServiceTest {
    		    @Autowired
    		    private MyService myService;
		
    		    @Test
    		    public void testService() {
    		        assertEquals("Hello", myService.getMessage());
    		    }
    		}


12. Spring Integration
----------------------
    ● Provides support for integrating with external systems (e.g., messaging, file systems).

    ● Key Components:
        ○ Message channels, endpoints, and adapters.


13. Spring Cloud
----------------
    ● A suite of tools for building microservices-based applications.

    ● Features:
        ○ Service discovery (Eureka).
        ○ Configuration management (Spring Cloud Config).
        ○ Load balancing (Ribbon).
        ○ API Gateway (Zuul, Spring Cloud Gateway).


14. Spring Batch
----------------
    ● A framework for batch processing.

    ● Key Components:
        ○ Job, Step, ItemReader, ItemProcessor, ItemWriter.


15. Spring WebFlux
------------------
    ● A reactive programming framework for building non-blocking, asynchronous web applications.

    ● Key Components:
        ○ Flux, Mono, WebClient.


16. Spring Internationalization (i18n)
--------------------------------------
    ● Supports building applications that can adapt to different languages and regions.

    ● Uses MessageSource for resolving messages.


17. Spring Caching
------------------
    ● Provides abstraction for caching data.

    ● Annotations:
        ○ @Cacheable, @CachePut, @CacheEvict.


18. Spring WebSocket
--------------------
    ● Supports real-time, bidirectional communication between clients and servers.


19. Spring Actuator
-------------------
    ● Provides production-ready features like health checks, metrics, and monitoring.


20. Spring Profiles
-------------------
    ● Allows you to define different configurations for different environments (e.g., dev, test, prod).

    ● Example:
    		@Profile("dev")
    		@Configuration
    		public class DevConfig {
    		    // Dev-specific beans
    		}


21. Spring Events
-----------------
    ● Supports event-driven programming using ApplicationEvent and ApplicationListener.


22. Spring Validation
---------------------
    ● Provides support for validating objects using annotations like @NotNull, @Size, etc.


23. Spring Expression Language (SpEL)
-------------------------------------
    ● A powerful expression language for querying and manipulating objects at runtime.


24. Spring JMS
--------------
    ● Provides support for Java Message Service (JMS) for messaging.


25. Spring Kafka
----------------
    ● Simplifies integration with Apache Kafka for building event-driven applications.


26. Spring AMQP
---------------
    ● Supports Advanced Message Queuing Protocol (AMQP) for messaging.


27. Spring for Android
----------------------
    ● Provides support for building Android applications.


28. Spring Shell
----------------
    ● A framework for building command-line applications.


29. Spring GraphQL
------------------
    ● Provides support for building GraphQL-based APIs.


30. Spring Native
-----------------
    ● Enables Spring applications to be compiled into native executables using GraalVM.


Conclusion
----------
The Spring Framework is a versatile and powerful tool for building Java applications. Its modular design allows developers to use only the components they need, making it suitable for a wide range of applications, from small projects to large-scale enterprise systems. By leveraging features like dependency injection, AOP, and Spring Boot, developers can build robust, maintainable, and scalable applications.