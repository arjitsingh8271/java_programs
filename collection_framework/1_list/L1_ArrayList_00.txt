ArrayList Collection in Java:
-----------------------------
ArrayList is the implementation class of List Interface which is used to store a group of individual objects where duplicate values are allowed. 
ArrayList internally follows array structure, which means in ArrayList all the elements are stored in contiguous memory locations same as an array, but ArrayList size is not fixed.

ArrayList is not a synchronized class. 
If any object is synchronized we can access only one thread at a time but if an object is not. synchronized then we can access multiple threads.



Creating an ArrayList in Java
Syntax : ArrayList<Type> al = new ArrayList<Type>();
Here, Type indicates the type of ArrayList.

ArrayList Constructors in Java
ArrayList<E> al = new ArrayList<E>();
This constructor is used to create the new ArrayList with a default capacity of 10 and the size of ArrayList is 0.

ArrayList<E> al = new ArrayList<E>(int capacity);
This constructor is used to create the new ArrayList with a default capacity of 10 and the size of ArrayList is 0.

ArrayList<E> al = new ArrayList<E>(Collection obj);
This constructor is used to create the new ArrayList by copying the elements of any existing Collection (List, Set).

Points to Remember:
-------------------
size means the number of elements that are stored in Collection.
capacity means the memory allocated for elements.
<E> is called Generic Parameter type.
E is the element type that must be a reference type but not any primitive type.


Methods of ArrayList: We can use all Collections Method to work with the ArrayList.




All ArrayList Methods:
----------------------
A list of all ArrayList methods can be found in the table below.

Some methods use the type of the ArrayList's items as a parameter
or return value. This type will be referred to as T in the table.



Method				Description	"Return Type"
------				------------------------
add()				Add an item to the list	"boolean|void"
addAll()			Add a collection of items to the list "boolean"
clear()				Remove all items from the list "void"
clone()				Create a copy of the ArrayList "Object"
contains()			Checks whether an item exist in the list "boolean"
ensureCapacity()	Increase the capacity of the list to be able to fit a specified number of items	"void"
forEach()			Perform an action on every item in the list	"void"
get()				Return the item at a specific position in the list	"T"
indexOf()			Return the position of the first occurrence of an item in the list	"int"
isEmpty()			Checks whether the list is empty	"boolean"
iterator()			Return an Iterator object for the ArrayList	"Iterator"
lastIndexOf()		Return the position of the last occurrence of an item in the list	"int"
listIterator()		Return a ListIterator object for the ArrayList	"ListIterator"
remove()			Remove an item from the list	"boolean|T"
removeAll()			Remove a collection of items from the list	"boolean"
removeIf()			Remove all items from the list which meet a specified condition	"boolean"
replaceAll()		Replace each item in the list with the result of an operation on that item	"void"
retainAll()			Remove all elements from the list which do not belong to a specified collection	"boolean"
set()				Replace an item at a specified position in the list	"T"
size()				Return the number of items in the list	"int"
sort()				Sort the list	"void"
spliterator()		Return a Spliterator object for the ArrayList	"Spliterator"
subList()			Return a sublist which provides access to a range of this list's items	"List"
toArray()			Return an array containing the list's items	"Object[]
trimToSize()		Reduce the capacity of the list to match the number of items if necessary	"Object[]"