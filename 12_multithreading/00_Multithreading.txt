What is a CPU / Processor?
--------------------------
The CPU (Central Processing Unit) is the "brain" of a computer. 
It performs all the calculations and instructions needed to run programs. 
Every action you do on a computer—like opening a file, playing a video, 
or browsing the web—goes through the CPU. 
It's responsible for processing the data and commands that make things happen on your device.

What is a Process?
-------------------
A process is a program that is currently running on your computer. 
When you open an app, like a web browser or a video player, it becomes a process. 
A process takes up resources, like memory and CPU time, and runs independently, handling tasks assigned to it.

What is a Core?
---------------
A core is a part of the CPU. Modern CPUs have multiple cores, which means they can do multiple things at once. 
Each core can handle its own tasks independently, so having more cores allows your computer to run many processes simultaneously, improving performance.

What is a Thread?
-----------------
A thread is like a smaller unit of a process. Each process can have one or more threads running inside it. 
Threads share resources within the same process but can perform tasks independently, allowing for more efficient multitasking. 
For example, in a web browser, one thread might handle loading a webpage while another handles displaying the content.

In summary:
-----------
    CPU: The computer’s brain.
    Process: A running program or app.
    Core: A part of the CPU that can handle tasks.
    Thread: A smaller unit of work within a process.


Multitasking:
-------------
Definition: Running multiple tasks at once
Execution: Switches between tasks
Resource Sharing: Processes have separate memory
Performance: Improves efficiency but not parallel execution
Example: Running Word, Chrome, and Music player

Multiprocessing:
-------------
Definition: Using multiple CPUs to run tasks
Execution: Runs processes in parallel
Resource Sharing: Each process has its own CPU/memory
Performance: True parallel execution
Example: A server using multiple processors

Multithreading:
-------------
Definition: Running multiple threads within a single process
Execution: Runs threads in parallel within a process
Resource Sharing: Threads share memory within a process
Performance: Faster execution within a process
Example: A video editor rendering multiple effects simultaneously
--------------------------------------------------


To Create a new thread in java, you can either extend the Threaad class or implement the Runnable Interface.


Why Runnable?
-------------
Because when we extends Thread class, we can't extends other class because java does'n support multiple inheritance.
So, Runnable is an interface when we implements the Runnable interface we can implements other interfaces.



STATES OF PROCESS / THREAD
--------------------------
1.NEW:
	A thread is in this state when it is created but not yet started.
2.RUNNABLE (Ready):
	When start() method is called the thread become runnable / ready.
	It's ready to run and is waiting for CPU time.
3.RUNNING:
	The thread is currently being executed by the CPU.
4.BLOCKED (Waiting):
	A thread is in this state when it is wating for a resource or for another thread to perform an action.
5.TERMINATED (Dead):
    The thread has finished its execution either by completing its task or being explicitly terminated.


List of important methods in the Thread class in Java
------------------------------------------------------
1. start(): Starts a new thread. It calls the run() method in a new thread.
	Thread t = new MyThread();
	t.start();

2. run(): Contains the code that the thread executes. It can be overridden in your class.
	public void run() {
    	System.out.println("Thread is running");
	}

3. sleep(long millis): Pauses the current thread for the specified time in milliseconds.
	Thread.sleep(1000); // sleeps for 1 second

4. join(): Waits for the thread to die (finish execution).
	t1.start();
	t1.join();  // main thread waits for t1 to finish

5. setName(String name): Sets the name of the thread.
	t.setName("Worker-1");

6. getName(): Returns the name of the thread.
	System.out.println(t.getName());

7. setPriority(int priority): Sets the priority of a thread (1 to 10).
	t.setPriority(Thread.MAX_PRIORITY); // 10

8. getPriority(): Returns the priority of the thread.
	int p = t.getPriority();

9. isAlive(): Returns true if the thread is still running.
	if (t.isAlive()) {
    	System.out.println("Thread is still running");
	}

10. yield(): Hints to the thread scheduler that the current thread is willing to yield its current use of CPU.
	Thread.yield();

11. interrupt(): Interrupts a sleeping or waiting thread.
	t.interrupt();

12. isInterrupted(): Checks if the thread has been interrupted.
	if (t.isInterrupted()) {
    	System.out.println("Thread was interrupted");
	}

13. currentThread(): (Static) Returns the currently executing thread.
	Thread current = Thread.currentThread();
	System.out.println("Current Thread: " + current.getName());

14. activeCount(): (Static) Returns the number of active threads in the current thread’s thread group.
	System.out.println(Thread.activeCount());











