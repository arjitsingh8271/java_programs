Lambda Expressions
---------------------
● Lambda expression are similar to methods, but they do not need a name and they can be implemented right in the body of a method.
eg: (x,y) -> x+y
● Lambda Expression use only with Function Interface.

► Lambda expression is an anonymous function.
i.e.,
	1. Not having any name
	2. Not having any return type
	3. Not having modifier

► Staps to make any function into lambda expression
i.e.,
	1. Remove modifier
	2. Remove return type
	3. Remove method name
	4. Place arrow

✅eg1:-
Normal method
private void hello() {
	System.out.println("Hello World");
}
Lambda expression
() -> {System.out.println("Hello World");}
Lambda expression
1. If body has only one statement then we can remove curlt brackets "{}".
() -> System.out.println("Hello World");

✅eg2:-
Normal method
private void add(int a, int b) {
	System.out.println(a+b);
}
Lambda expression
(int a, int b) -> {System.out.println(a+b);}
Lambda expression
2. Use type inference, compiler guess the situation or context.
(a, b) -> System.out.println(a+b);

✅eg3:-
Normal method
private int getStingLength(String str) {
	return str.length();
}
Lambda expression
(String str) -> {return str.length();}
Lambda expression
3. No return keyword.
(str) -> str.length();
Lambda expression
4. If only one parameter remove the small brackets "()".
str -> str.length();

► NOTE: 
● A variable inside Lambda Expression is a Act as a Final variable.
● Lambda Expression cn access local variable, but they must be effectively final.





Functional Interface
--------------------
● A Functional Interface is an interface that has exactly one abstract method.
SAM (Single Abstract Method)
● But can have any numbers of defaults & static methods.
● We can use an annotation i.e. @FunctioanlInterface

✅eg1:
@FunctioanlInterface
public interface Myinterface {
	public void Hello();	// abstract method
}

✅eg2:
@FunctioanlInterface
public interface Myinterface {
	public void hello();	// abstract method

	default void bye() {
	};

	public static void ok() {
	};
}

✅eg3:
▪ case1:
@FunctioanlInterface
public interface Parent {
	public void hello();
}
@FunctioanlInterface
public interface Child extends Parent {
}

▪ case2:
@FunctioanlInterface
public interface Parent {
	public void hello();
}
@FunctioanlInterface	//error
public interface Child extends Parent {
	public void bye();
}

▪ case3:
@FunctioanlInterface
public interface Parent {
	public void hello();
}
@FunctioanlInterface
public interface Child extends Parent {
	public void hello();
}

▪ case4:
@FunctioanlInterface
public interface Parent {
	public void hello();
}
@FunctioanlInterface
public interface Child extends Parent {
	default void bye() {
	};

	public static void ok() {
	};
}

● We can invoke lambda expression by using functional interface.

✅eg1:
@FunctionalInterface
interface A {
	void show();
}

class MyClass {
	public static void main(String[] args) {
		// Annonumous inner class
		A a = new A() {
			public void show() {
				System.out.println("Showing...");
			}
		};
		a.show();

		// Lambda Expression
		A b = () -> System.out.println("Showing...");
		b.show();
	}
}





function
---------

● Built-in Functional Interfaces (Java 8) :
● In java.util.function

1. Predicate<T>
    ● Takes one input, returns a boolean.
    ● Used for filtering.
    ● test()

2. BiPredicate
	● Takes two input, returns a boolean.
	● test()

3. Function<T, R>
    ● Takes one input, returns one output.
    ● apply()

4. UnaryOperator<T>
	● In Function if I/O datatype are same multi-threadingwe can replace Function with UnaryOperator
	● apply()

5. BiFunction<T, R>
    ● Takes two input, returns one output.
    ● apply()

6. BinaryOperator<T>
	● In BiFunction if I/O datatype are same multi-threadingwe can replace BiFunction with UnaryOperator
	● apply()

7. Consumer<T>
    ● Takes one input, returns nothing.
    ● Used for printing/logging.
    ● accept()

8. BiConsumer<T>
    ● Takes two input, returns nothing.
    ● accept()

9. Supplier<T>
    ● Takes no input, returns one output.
    ● Used for getting values.
    ● get()





Method & Constructor reference
------------------------------
● A Method Reference is a shorthand syntax for a lambda expression that calls an existing method.
● Syntax: ClassName::methodName
● :: -> Method Reference Operator

► Types of Method References:

1. Static method
Syntax: ClassName::staticMethodName
Eg: Math::max

2. Instance method of a particular object	
Syntax: object::instanceMethodName	
Eg: System.out::println

3. Instance method of an arbitrary object of a particular type	
Syntax: ClassName::instanceMethodName	
Eg: String::toLowerCase

4. Constructor reference	
Syntax: ClassName::new	
Eg: ArrayList::new


► Advantages of Method & Constructor Reference
	● Cleaner and more readable code
	● Reuses existing method logic
	● Less boilerplate than full lambda





Stream API
-------------
● Java Streams API was introduced in Java 8 to process collections (like Lists, Sets, and Maps) in a functional and declarative way. 
● It enables operations like filtering, mapping, reducing, sorting, and iterating over collections efficiently.
● Java Stream API for Bulk Data Operations on Collections.
● A Stream in Java is a sequence of elements that supports aggregate operations (such as filter(), map(), reduce(), sorted(), etc.).

► Key Features of Streams:
    1. Does not store data (operates on collections).
    2. Does not modify the original collection.
	3. (Functional Style): Uses lambda expressions for clean and readable code
	4. (Internal Iteration): Handles iteration internally, unlike loops
	5. (Lazy Evaluation): Intermediate operations only when a terminal operation is called
	6. (Pipelining): Operations are chained (pipelined) for efficient processing.
	7. (Parallel Processing): parallelStream() allows multi-threading to improve performance
	8. (Primitive Streams): IntStream, LongStream, DoubleStream to avoid boxing overhead
	9. (Reduction Operations): Supports operations like sum, min, max, count, average
	10. (Collecting Results): Converts Stream back to List, Set, or Map.
	11. (Infinite Streams): Lazy-loaded infinite sequences

► Intermediate Operations (Returns another Stream):
    ● filter(): Filters elements based on a condition
    ● map(): Transforms each element
    ● sorted(): Sorts elements
    ● distinct(): Removes duplicates
    ● limit(n): Limits the number of elements
    ● skip(n): Skips the first n elements

► Terminal Operations (Returns non-stream values like list, int, or void):
    ● forEach(): Iterates over elements
    ● collect(): Converts stream to List, Set, Map
    ● reduce(): Aggregates elements (e.g., sum)
    ● count(): Counts elements
    ● toArray()
    ● min(), max(): Finds smallest and largest
    ● anyMatch(): Checks if any element matches condition
    ● allMatch(): Checks if all elements match condition
    ● noneMatch(): Checks if no elements match condition

► NOTE: 
● If





Date & Time API
-----------------
► Why New API?
-> Old classes like Date, Calendar had:
   ● Mutability issues
   ● Not thread-safe
   ● Poor design
   ● Confusing timezone handling

► Commonly Used Classes
	● LocalDate: Represents date (yyyy-MM-dd) without time or timezone
	● LocalTime: Represents time (hh:mm:ss) without date or timezone
	● LocalDateTime: Combines date and time
	● ZonedDateTime: Full date/time with timezone
	● Instant: Timestamp (machine time)
	● Period: Difference between two dates (in years, months, days)
	● Duration: Difference between two times (in seconds, nanoseconds)
	● DateTimeFormatter: Used to format/parse date/time





Optional Class
--------------
● Optional<T> class to avoid NullPointerException and write more robust, readable, and null-safe code.
● Optional is a container object which may or may not contain a non-null value.
	● If a value is present, isPresent() returns true.
	● If not, it’s empty, and calling get() will throw NoSuchElementException.


► Common Methods of Optional
	● isPresent(): Checks if value is present
	● ifPresent(Consumer): Executes action if value exists
	● get(): Returns the value if present
	● orElse(T): Returns value if present, else default
	● orElseGet(Supplier): Returns value if present, else from supplier
	● orElseThrow(): Throws exception if no value present
	● map(Function): Transforms value if present
	● flatMap(Function): Similar to map, but avoids nested Optionals
	● filter(Predicate): Returns Optional if value passes the filter

► Why Use Optional?
● Before Java 8:
String name = getUserName();
if(name != null) {
    System.out.println(name);
}

● With Optional:
Optional<String> name = getUserName();
name.ifPresent(System.out::println);

✅ Helps to avoid null checks
✅ Encourages functional programming style

► How to Create Optional
	● Optional<String> opt1 = Optional.of("Hello");          // Non-null
	● Optional<String> opt2 = Optional.ofNullable(null);     // May be null
	● Optional<String> opt3 = Optional.empty();              // Always empty



Base64 Encode & Decode
---------------------