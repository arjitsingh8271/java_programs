Regular Expressions (Regex) in Java are used to define patterns for searching, matching, and manipulating text. 
Java provides the "java.util.regex" package to work with regex.


Key Classes in java.util.regex
--------------------------------
Class		Description
-----		-----------
Pattern	:	Defines a compiled regex pattern.
Matcher	:	Performs operations like searching and matching against a pattern.


Common Regex Patterns
---------------------
Pattern		Meaning
-------		-------
\d			Any digit (0-9)
\D			Any non-digit
\w			Any word character (a-z, A-Z, 0-9, _)
\W			Any non-word character
\s			Any whitespace (space, tab, newline)
\S			Any non-whitespace
^			Start of string
$			End of string
.			Any single character
*			Zero or more occurrences
+			One or more occurrences
{n}			Exactly n occurrences

Character classes
-----------------
[abc] 			a, b, or c (simple class)
[^abc] 			Any character except a, b, or c (negation)
[a-zA-Z] 		a through z or A through Z, inclusive (range)
[a-d[m-p]] 		a through d, or m through p: [a-dm-p] (union)
[a-z&&[def]] 	d, e, or f (intersection)
[a-z&&[^bc]] 	a through z, except for b and c: [ad-z] (subtraction)
[a-z&&[^m-p]] 	a through z, and not m through p: [a-lq-z](subtraction)

Predefined character classes
----------------------------
. 	Any character (may or may not match line terminators)
\d 	A digit: [0-9]
\D 	A non-digit: [^0-9]
\h 	A horizontal whitespace character: [ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000]
\H 	A non-horizontal whitespace character: [^\h]
\s 	A whitespace character: [ \t\n\x0B\f\r]
\S 	A non-whitespace character: [^\s]
\v 	A vertical whitespace character: [\n\x0B\f\r\x85\u2028\u2029]
\V 	A non-vertical whitespace character: [^\v]
\w 	A word character: [a-zA-Z_0-9]
\W 	A non-word character: [^\w]

POSIX character classes (US-ASCII only)
---------------------------------------
\p{Lower} 	A lower-case alphabetic character: [a-z]
\p{Upper} 	An upper-case alphabetic character:[A-Z]
\p{ASCII} 	All ASCII:[\x00-\x7F]
\p{Alpha} 	An alphabetic character:[\p{Lower}\p{Upper}]
\p{Digit} 	A decimal digit: [0-9]
\p{Alnum} 	An alphanumeric character:[\p{Alpha}\p{Digit}]
\p{Punct} 	Punctuation: One of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
\p{Graph} 	A visible character: [\p{Alnum}\p{Punct}]
\p{Print} 	A printable character: [\p{Graph}\x20]
\p{Blank} 	A space or a tab: [ \t]
\p{Cntrl} 	A control character: [\x00-\x1F\x7F]
\p{XDigit} 	A hexadecimal digit: [0-9a-fA-F]
\p{Space} 	A whitespace character: [ \t\n\x0B\f\r]

java.lang.Character classes (simple java character type)
--------------------------------------------------------
\p{javaLowerCase} 	Equivalent to java.lang.Character.isLowerCase()
\p{javaUpperCase} 	Equivalent to java.lang.Character.isUpperCase()
\p{javaWhitespace} 	Equivalent to java.lang.Character.isWhitespace()
\p{javaMirrored} 	Equivalent to java.lang.Character.isMirrored()

Greedy quantifiers
------------------
X? 	X, once or not at all
X* 	X, zero or more times
X+ 	X, one or more times
X{n} 	X, exactly n times
X{n,} 	X, at least n times
X{n,m} 	X, at least n but not more than m times

Reluctant quantifiers
---------------------
X?? 	X, once or not at all
X*? 	X, zero or more times
X+? 	X, one or more times
X{n}? 	X, exactly n times
X{n,}? 	X, at least n times
X{n,m}? 	X, at least n but not more than m times

Possessive quantifiers
----------------------
X?+ 	X, once or not at all
X*+ 	X, zero or more times
X++ 	X, one or more times
X{n}+ 	X, exactly n times
X{n,}+ 	X, at least n times
X{n,m}+ 	X, at least n but not more than m times

Logical operators
------------------
XY 	X followed by Y
X|Y 	Either X or Y
(X) 	X, as a capturing group


URL for more Info:
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html