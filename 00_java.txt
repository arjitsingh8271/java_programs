To compile:	$javac filename.java 	(java file)
To run:		$java filename			(class file created by javac)
	
To check java version
	$ java --version

--------------------------------------------

JDK (Java Development Kit)
JRE (Java Runtime Environment)
JVM (Java Virtual Machine) : Platform Dependent

JDK = JRE + Development tools(i.e java, javac, javadoc, javaw)
JRE = Java Package Classes + Runtime Libraries + JVM
JVM = Class Loader + Memory Areas + Execution Engine

---------------------------------------------

1. Variable Names
	camelCase (Lower CamelCase) 
	Descriptive and Meaningful
	ex: customerName, totalAmount, index, isVerified, orderList

2. Naming Conventions for Boolean Variables
	Prefix with "is", "has", "can", or "should":
	ex: isAvailable, hasLicense, canProceed, shouldRetry

3. Method Names
	camelCase (Lower CamelCase)
	ex: getName(), processPayment(), calculateTotal(), printReport()

4. Method Parameters
	Descriptive Names
	ex: calculateInterest(double principalAmount, double rate, int timePeriod)

5. Constants
	ALL_CAPS_WITH_UNDERSCORES 
	Descriptive Names
	ex: MAX_RETRIES, DEFAULT_TIMEOUT, PI, MIN_AGE

6. Class Names
	PascalCase (Upper CamelCase)
	ex: Customer, Invoice, LinkedList, HttpRequestHandler

7. Package Names
	Lowercase 
	Reverse Domain Name
	ex: com.example.projectname, org.companyname.module

8. Plural Names for Collections
	Use Plural Names for Collections
	ex: List<String> names, Set<Integer> ids, int[] scores

--------------------------------------------------

Object class is the parent class or superclass of all classes in java.
There are 11 methods in Object class:
	1. clone()
	2. equals(Object obj)
	3. finalize()
	4. getClass()
	5. hashCode()
	6. notify()
	7. notifyAll()
	8. toString()
	9. wait()
	10. wait(long timeout)
	11. wait(long timeout, int nanos)

protected Object clone()
Creates and returns a copy of this object.

boolean	equals(Object obj)
Indicates whether some other object is "equal to" this one.

protected void	finalize()
Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.

Class<?>	getClass()
Returns the runtime class of this Object.

int	hashCode()
Returns a hash code value for the object.

void	notify()
Wakes up a single thread that is waiting on this object's monitor.

void	notifyAll()
Wakes up all threads that are waiting on this object's monitor.

String	toString()
Returns a string representation of the object.

void	wait()
Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.

void	wait(long timeout)
Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.

void	wait(long timeout, int nanos)
Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.

--------------------------------------------------
Coupling: How much work is involved in changing something?

	Coupling is important everywhere:
		An engine is tightly coupled to a Car.
		A wheel is looselt coupling to a Car.

	Coupling is even more important in building great software:
		Only this constant in technology is change.
			Business requirement change.
			Frameworks change.
			Code changes.
		We want Loose Coupling as much as possible.
		We want to make fuunctionala changes with as less code change as possible.

-----------------------------------------------------

Import Statement
----------------

Types of import statements:-
1. Explicit import statements (eg.: import java.util.ArrayList;)
2. Implicit import statements (eg.: import java.util.*;)


"java.lang" like String class & "Default pakage" like current working directory. This two packages we are not required to import because this package is imported automatically in every program.
What is Inside java.lang:-
Object : "The parent class of all Java classes."
String : "Represents immutable character sequences."
Math : "Contains mathematical functions (e.g., sqrt(), pow())."
System : "Provides system-related functionalities (e.g., System.out.println())."
Thread : "Supports multithreading in Java."
Exception : "Base class for all exceptions."
Integer, Double, Float, etc. : "Wrapper classes for primitive data types."
Runnable :	"Interface for defining threads."
Class : "Represents classes and provides reflection capabilities."


Whenever we are importing a pakage all classes and interfaces present in that package by default available but not the sub-package classes. 
If you want use a sub package class compulsory import statement must be required until sub-package level.

Ex:
	java
	│── util
		│── regex
			│── Pattern

	a. import java.*;				❎
	b. import java.util.*;			❎
	c. import java.util.regex.*;	✅


